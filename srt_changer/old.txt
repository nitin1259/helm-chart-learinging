00:00
good morning my name is Apurv Asti I am
00:03
a product manager in Amazon Web Services
00:06
today I'll introduce you to one of our
00:08
newest services AWS secrets manager will
00:13
talk about features of the service
00:15
typical use cases and how you can use
00:18
this service to easily and securely
00:21
manage your secrets such as database
00:23
credentials SSH keys or auth tokens I'll
00:27
also include demos so that you can see
00:29
what the service looks like in real life
00:34
alright so secrets manager well of
00:37
course it enables you to manage your
00:39
secrets it also makes it really easy for
00:42
you to follow security best practices
00:45
such as encrypting secrets and rotating
00:48
these regularly so if you are an ID
00:50
admin who's responsible for storing and
00:53
managing secrets well you can use
00:56
secrets manager to perform all of these
00:58
tasks from one location if you are a
01:01
security admin who's responsible for
01:03
ensuring that your organization follows
01:06
regulatory and compliance requirements
01:08
well you can use secrets manager to
01:11
audit and monitor the use of your
01:14
secrets to ensure compliance and you can
01:17
also use secrets manager to ensure that
01:19
your secrets are rotated as frequently
01:22
as required and finally if you are a
01:25
developer you can on board the secrets
01:28
manager so that you don't have to worry
01:30
about managing secrets you can let AWS
01:33
do that for you now before I start
01:38
talking about the features of the
01:40
service let me give you some background
01:42
on why we decided to build secrets
01:44
manager now as with any other AWS
01:47
product or service our story begins with
01:50
customer feedback we heard from
01:53
customers that managing secrets is
01:55
really important but it's also hard
01:58
we heard use cases such as my
02:01
applications use secrets but I don't
02:04
want to write plain text secrets in the
02:06
source code or in environment variables
02:08
or we heard my organization is moving to
02:12
a service Orient
02:13
architecture so how do I ensure that
02:16
these services can reliably and
02:19
consistently get the secrets that they
02:22
need to operate he also heard that
02:25
customers wanted to rotate their secrets
02:27
regularly to meet compliance needs or
02:30
just to improve security so for example
02:33
PCI requires that secrets must be
02:36
rotated every thirty days and finally we
02:42
also heard from customers that they
02:44
wanted to control who is doing what with
02:48
their secrets they needed good
02:49
mechanisms to do all of this and as we
02:55
dug into each of these use cases what we
02:58
found was managing secrets is really
03:01
hard there are solutions out there but
03:03
they're either too complex or too
03:05
expensive particularly when you factor
03:08
in the cost of the infrastructure as
03:10
well as the people required to ensure
03:13
that your secrets management solution is
03:15
highly available and can scale to make
03:18
any spiky load when it came to rotation
03:22
we found that people often build manual
03:26
or programmatic processes that require
03:29
them to take applications offline update
03:33
secrets and then redeploy applications
03:36
to work with these new secrets and with
03:38
all of this process if they miss
03:40
updating an application their processes
03:42
would break and finally when it came to
03:46
visibility our custom or we found that
03:49
people had very limited visibility so
03:52
for example once you share a password
03:55
with someone over email you really do
03:58
not have any mechanism to ensure that no
04:01
one else can get that password and use
04:04
that password so with all of this in
04:09
mind we decided let's make life a little
04:12
easier for our customers by building a
04:15
service that enables them to manage the
04:18
life cycle of their secrets and that's
04:21
when we decided to launch AWS secrets
04:23
manager a service that makes it easy for
04:26
our customers
04:27
to manage the lifecycle of all of their
04:30
secrets in terms of features I'd like to
04:33
point out four key features that enable
04:36
customers should do this first secrets
04:40
manager allows customers to easily
04:42
rotate secrets without impacting
04:46
applications or employees next secrets
04:50
manager enables customers to tightly
04:53
control who can do what with their
04:56
secrets this service ensures that all
04:58
secrets are secured and can be audited
05:02
and monitored easy and finally this
05:06
offers a pay-as-you-go model so no long
05:08
term contracts or license fees you just
05:11
pay for what you use how often you use
05:18
now let's dive deeper into each of these
05:20
four features I'll start with talking
05:22
about the rotation capability secrets
05:26
manager offers the ability to rotate
05:28
secrets seamlessly without impacting
05:30
applications the service offers built-in
05:33
integrations for secrets for databases
05:36
that are hosted on RDS later on in this
05:40
in this webinar I'll show you how you
05:42
can store a database secret and
05:44
configure rotation with just a few
05:47
clicks in the indy secrets manager
05:49
console if you're looking to store and
05:52
rotate other kinds of secrets you can do
05:54
that easily with secrets manager simply
05:57
store the secret and write a custom
05:59
lambda function to make whatever
06:01
rotation needs that you may have now
06:04
secrets manager ensures that your
06:06
applications won't break during rotation
06:08
by providing this concept of versioning
06:12
I'll show you how rotation works later
06:14
on in the webinar
06:16
the next key feature is the ability to
06:20
control access to your secrets with
06:23
secrets manager you do that using iam
06:26
policies now for those of you who may be
06:29
familiar with I am you already know that
06:32
I am policies are super fine-grained so
06:35
you can actually write a policy that
06:37
says employee Bob can access Midas
06:41
grid' only if employee bob is coming in
06:44
from the corporate IT network and only
06:47
if bob has authenticated using a second
06:50
factor device so that's the kind of
06:52
fine-grained access control you can get
06:55
to define who can use your secrets when
06:59
and there now along with iam policies
07:03
secrets manager offers other
07:05
capabilities to control access to your
07:07
secrets one of the first things that
07:10
comes to my mind is tag based access
07:12
control so for example you can tag all
07:16
the secrets for a team with the tag
07:19
alpha and then just write one I am
07:22
policy to grant all the members of that
07:25
team access to all the secrets required
07:28
by the team as a new employee joins you
07:32
just grant them access by attaching the
07:34
existing policy to that I am user or
07:36
role similarly as the team creates more
07:40
secrets use you just add you just tag
07:44
these secrets with alpha and you're good
07:47
to go you don't need to create new
07:48
policies another mechanism to managing
07:53
access to Secrets is resource based
07:55
policies these are similar to s3 bucket
07:59
policies or kms key policies a resource
08:03
based policy lives on the resource which
08:06
in this case is the secret and can be
08:09
used define who can access the secret so
08:13
let's say you want to grant a business
08:15
partner access to a secret well you can
08:18
now use a resource based policy for that
08:20
without having to email the secret
08:27
moving on to the the security and the
08:30
audit ability capabilities secrets
08:34
manager encrypts all secrets by default
08:37
these secrets are encrypted using
08:39
encryption keys that live in your
08:41
account and are under your control
08:44
secrets manager also integrates with AWS
08:48
is auditing and monitoring services such
08:50
as cloud trail and cloud watch so you
08:53
can easily
08:55
understand who is doing what with your
08:58
secrets later on in this demo I'll show
09:02
you how to set up an SNS notification to
09:05
monitor the use of your secrets and
09:09
finally we get to the pricing aspect of
09:12
things as I mentioned previously there
09:14
is no annual license or upfront cost you
09:18
simply pay 40 cents per secret per month
09:21
this price is prorated based on the
09:24
number of hours per month so if you have
09:26
a secret that lasts for let's say around
09:29
2 weeks you'll be billed 20 cents and
09:33
not 40 cents there is also a nominal
09:36
charge on the per API call all right
09:44
enough talk let's switch gears and see
09:47
what secrets manager looks like in real
09:49
life in this demo I'll show you how to
09:52
store and retrieve an ssh key from
09:55
secrets manager together started i go to
10:00
the AWS management console in the search
10:03
bar type secrets manager this brings me
10:08
to the secrets manager console as you
10:12
can see i old i already have a few
10:14
secrets stored in secrets manager I'll
10:17
start by storing a new one now this
10:21
screen asks me to select the type of
10:23
secret that I'm about to store since I'm
10:26
storing an SSH key I select the other
10:29
type of Secrets option next I provide
10:33
the actual key value I have this
10:37
information already saved so I'll copy
10:40
and paste it over I'm not too worried
10:45
about showing you guys these values
10:47
because these are dummy values that the
10:50
no trick they're not real you can see
10:52
the truncate right here next I choose
10:56
the encryption settings I choose to
10:58
continue with the default encryption
11:00
setting I also have the option of using
11:04
a customer master key to encrypt the
11:06
secret
11:08
I'll press next I now have to give the
11:15
secret a name that I'll use to reference
11:20
and I'll also give the secret a
11:23
description a description is always a
11:25
good idea because it it makes it easier
11:28
to understand what this secret is for
11:36
and next I press the next button I have
11:42
the option of setting up a rotation but
11:44
I'll skip this for now
11:45
I choose next now this is the review
11:50
screen this this tells me the
11:53
information that I have added and it
11:57
also tells me how I can retrieve this
11:59
secret so for example if I if I have a
12:02
Python application I can copy this code
12:06
snippet and paste it in my application
12:09
this code snippet will allow my
12:11
application to retrieve this SSH key as
12:14
and when the application needs it I
12:20
press store and that's it
12:24
the secret is now securely stored in
12:27
secrets manager so let's see what the
12:29
retrieval story looks like I'll pull up
12:37
my command prompt and I'll use the get
12:44
secret value command to retrieve this
12:48
secret
12:55
and here you go we stored a secret and
12:59
we were able to retrieve it
13:11
switching back to the slides now let me
13:15
now walk you through the typical use
13:17
cases and how you can use secrets
13:20
manager to meet those use cases so one
13:24
of the first use cases that we discussed
13:26
was enabling applications to use secrets
13:30
without providing these secrets in plain
13:32
text
13:33
well you can store the secret in
13:36
sequence manager and then just add the
13:38
dummy code to show and then just add the
13:42
dummy code to enable your application to
13:44
retrieve that secret for this particular
13:49
example let me walk through a scenario
13:51
where an application needs access to a
13:54
database and requires database
13:56
credentials from secrets manager to make
13:59
this access happen in this scenario the
14:02
database admin would load the database
14:05
credential into secrets manager the dev
14:08
ops engineer would deploy the
14:10
application with the appropriate code to
14:13
retrieve this from secrets manager and
14:15
that's about it you can configure
14:18
sequence manager to rotate this secret
14:21
automatically neither the DBA nor the
14:25
DevOps engineer need to be involved in
14:27
this process from that point onwards so
14:31
let me show you what's happening behind
14:33
the scene and then I'll show you a demo
14:36
of what this looks like in real life
14:39
let's say you have an application that
14:41
needs to access a database well if the
14:46
application is running on an ec2
14:47
instance you can use an iam role to
14:50
provide AWS credentials that can then be
14:54
used to access secrets manager and any
14:57
any secret that's stored within Secrets
14:59
manager so here's what the experience
15:01
looks like the application authenticates
15:05
and authorizes access by presenting the
15:08
AWS credentials once the author nan
15:12
dogsy checks are passed secrets manager
15:16
decrypts the secret and sends it
15:18
securely over TLS to your application
15:21
your app
15:22
can then go use this secret and if
15:26
you've configured secrets manager to
15:27
rotate the secret automatically secrets
15:31
manager will will execute this rotation
15:34
transparently in this scenario the
15:42
coolest thing is that once you've set
15:44
secrets manager up no human being ever
15:47
needs to touch or view the secret all
15:50
the management happens automatically all
15:52
the consumption happens automatically so
15:57
let me show you what this looks like in
15:59
real life I will set up the credit I'll
16:02
store the credentials for a database in
16:04
secrets manager and then I'll show you
16:08
how you can easily set up rotation for
16:10
those credentials I go back to the I
16:18
start this process by going to the RDS
16:21
console within RDS I have previously
16:27
created a database for this demo nothing
16:32
particularly interesting going on here
16:34
it's a my sequel instance t2 micro these
16:40
are the security groups to restrict
16:42
access this is not publicly accessible
16:45
similar to how typical databases operate
16:51
this is within a V PC as you can see
16:56
here so the first step is storing the
17:01
credentials for this database within
17:03
secrets manager I go back to the secrets
17:06
manager console and start the stores
17:10
secret workflow on the first screen I
17:14
choose the very first option because I'm
17:17
storing the credentials for a database
17:19
that resides on RDS the first step is to
17:25
provide a username and a password I have
17:30
this information stored here already so
17:32
I just copy and
17:35
is this over again I am not worried
17:42
about you guys seeing these credentials
17:43
because I'll rotate them immediately
17:47
I'll continue to use the default
17:50
encryption key scrolling down secrets
17:55
manager asks me to select which database
17:57
these credentials are for the service
18:00
needs this information to in to enable
18:03
rotation later on so I select the
18:07
database and choose next now I'll give
18:13
the secret an easy to remember name as
18:17
well as a description
18:19
I choose next to come to the rotation
18:34
configuration section rotation is
18:38
disabled by default but I want to rotate
18:41
the secret so I choose the enable
18:44
automatic rotation option next I select
18:47
how frequently I want secrets manager to
18:50
rotate this secret 30 days seems to be
18:54
fine so I'll leave it at that
18:57
finally secrets manager wants to know
18:59
how it should rotate the secret I ought
19:04
to use the first option which says I am
19:07
storing the credentials for a super user
19:10
and the super user has permissions to
19:12
change its own password this is similar
19:15
to how you would change your own
19:17
password if you were using an email
19:19
client I press next and I come to the
19:23
review screen this information message
19:29
here shows us that the first rotation
19:32
will happen immediately when you store a
19:34
secret this is important because if
19:38
there are errors in the rotation
19:40
configuration you will be able to catch
19:42
them right now
19:44
scrolling down is again the sample code
19:47
that you can use
19:48
I press the store button as you can see
19:53
from my screen secrets manager is
19:55
storing the secret as well as setting up
19:58
the rotation configuration so we'll give
20:02
this a few seconds the way secrets
20:06
manager executes rotation is to create a
20:08
lambda function in the same VPC as the
20:11
resource and then periodically trigger
20:14
that lambda function to execute the
20:17
rotation so setting of rotation can take
20:20
a few seconds but as you can see now the
20:24
secret is now stored and the rotation
20:27
has now been configured so let's go
20:30
verify this I press the view details
20:34
button which brings me to the details of
20:36
the secret I scroll down to see the
20:42
retrieve secret value option I see that
20:49
this is the password when I compare this
20:52
with the previous password you can see
20:58
that these two values are different so
21:01
this is how secrets manager has stored
21:04
the secret executed rotation and you can
21:07
now verify that the rotation actually
21:09
works you can also retrieve the secret
21:13
from the CLI so let's go ahead and try
21:17
that out I copy this command ported over
21:27
koala here is the secret and all the
21:31
information including the name the
21:34
version ID all the information that we
21:37
provided as well as the versions for the
21:40
secret alright going back to our slides
21:43
now
21:52
the next use case that I'd like to talk
21:55
about is rotating secrets well we've
21:58
already seen what it looks like in
22:00
practice so let me show you let me give
22:03
you a peek behind the covers when you
22:06
configure secrets manager to rotate a
22:08
secret on your behalf
22:10
secrets manager creates a lambda
22:12
function in the same VPC as the resource
22:15
and then uses the lambda function to
22:18
trigger rotations so when it comes time
22:22
to execute a rotation the lambda
22:24
function triggers secrets manager to
22:27
create a new secret store this new
22:31
secret within the resource update the
22:36
value that is stored within secrets
22:37
manager now when an application attempts
22:44
to retrieve the secret from secrets
22:45
manager it will get the updated value
22:48
throughout this entire process secrets
22:51
manager uses labels to manage the
22:54
various versions of a secret this
22:57
enables secrets manager to know which
22:59
version is active and should be passed
23:01
along to applications as a result
23:05
applications or developers do not have
23:07
to worry about managing multiple
23:09
versions of Secrets
23:10
they always get the active version of a
23:13
secret which they can then use to
23:17
connect to the resource the next big use
23:24
case is around controlling access to
23:26
secrets as well as monitoring and
23:29
auditing how secrets are managed well to
23:33
control access you can use iam policies
23:36
you can use tags you can also use
23:38
resource based policies so let me show
23:41
you what this looks like in real life
23:45
you can you can set up an iam policy
23:48
similar to what you have here to grant
23:51
access to individual secrets or a range
23:56
of Secrets let me show you what this
23:59
looks like in practice I go back to the
24:02
bilis management console and now I'll go
24:05
to the iam console from the iam console
24:16
I select admin user this is the user
24:20
that I'm using in my CLI as you can see
24:23
currently admin user has administrative
24:26
permissions what that means is this user
24:29
can access any resource from anywhere
24:33
I will revoke this access this user now
24:42
has no permissions and I can go verify
24:44
this if I go to the CLI and attempt to
24:48
retrieve my test secret slash my sequel
24:55
we get a permissions denied
24:59
so let's grant this user permissions to
25:03
access secrets to do this I select add
25:06
permissions I go to attach existing
25:11
policies directly and then I pick a
25:15
policy I have already created this
25:19
policy and as you can see on your
25:22
screens
25:23
this policy grants the ability to get a
25:28
secret and describe a secret for any
25:31
secret that begins with the name my
25:33
tests secret I'll review this policy and
25:40
then add permissions the CLI user now
25:47
has permissions should retrieve any
25:49
secret that begins with Midas secret so
25:53
let's go test it out yep
26:00
that works what about what about any
26:04
other secret yep that works too so so
26:19
that's how you can use I am policies and
26:21
define who can access your secrets
26:26
switching back to our presentation you
26:30
can write finder in iam policies to
26:33
further restrict access you can add
26:35
conditions you can define you can define
26:38
resources to tightly control which
26:42
secrets can be accessed and movin you
26:48
can also control access to secrets using
26:50
tags for example you can tag your
26:54
secrets and then use a policy that looks
26:57
similar to this policy to grant access
27:00
to any secret that is tagged
27:02
appropriately so this is what a resource
27:08
based policy looks like you can attach
27:10
this policy to grant access to I am
27:15
principles within your account or I am
27:18
principals in an external account so a
27:21
typical use case would be granting
27:23
access across AWS accounts so for
27:27
example let's say you have a business
27:29
partner that needs to access credentials
27:31
that are stored within your account well
27:34
you can write a similar policy and
27:38
enable them to get that access without
27:41
having to email the secret or you know
27:44
give it over a post-it note along with
27:51
access control comes the ability to
27:53
audit and monitor well all actions in
27:57
secrets manager are recorded in cloud
28:00
field so you can go look at cloud trail
28:02
logs to audit who is doing what with
28:05
your secrets let me show you what that
28:07
looks like in real life I'll switch back
28:10
to
28:11
the console from the IAM console I'll go
28:15
to plough trail once cloud trail pulls
28:27
up I select the event history option
28:36
since I'm looking for secrets manager
28:39
related activity I'll select the event
28:42
name and set the event name as kept
28:46
secret value so this shows me who has
28:52
retrieved any secret from my account and
28:55
I can dive deeper into each of these
28:58
retrievals by looking at ad which access
29:02
key was used was the was the access
29:06
permitted or denied and the source IP of
29:10
where the traffic came from moving back
29:17
to a presentation the integration with
29:21
cloud trail makes it easy for you to
29:23
audit how your secrets are being used
29:27
but what if you want to be a little more
29:30
proactive about this well you can set up
29:34
monitoring on your secrets to get alerts
29:38
quickly regarding the use of your
29:41
secrets so let me show you how to set up
29:44
such an alert I go back to the console
29:53
and this time I select cloud watch now I
30:00
can set up cloud was to alert me
30:02
regarding particular activity for my
30:04
secrets for this demo I'll show you how
30:07
to set up a cloud watch notification
30:09
whenever a secret is retrieved from your
30:12
service to set up a notification select
30:19
rules
30:20
and create a new rule
30:23
this rule requires that anytime secrets
30:28
manager is called from Klout rail logs
30:32
for get secret value then cloud wad
30:39
should trigger a lambda function then I
30:46
have configured this lambda function to
30:48
send me an SMS notification every time
30:50
this lambda function is triggered next I
30:54
press configure details and I give and I
30:58
give this notification and easy to
31:00
remember name and that's it I have now
31:22
configured cloud watch to send me an
31:25
alert every time a secret is retrieved
31:27
from secrets manager all right
31:33
get coming back to our slides so so up
31:38
till now we've spoken about typical use
31:42
cases for secrets manager the features
31:44
of the service and how you can use these
31:46
features to meet these use cases we went
31:50
through a few demos so I hope you have a
31:53
good starting point for using secrets
31:55
manager as you get started here are a
31:59
few things to keep in mind first no
32:02
plain text secrets you have to move away
32:05
from them store them in secrets manager
32:07
and configure your applications to de
32:10
treat these as and when they need these
32:14
secrets next create unique secrets don't
32:18
reuse secrets create a unique secret for
32:22
every region for every account for every
32:24
environment third rotate secrets
32:28
regularly it's super easy with secrets
32:31
manager just a few clicks and you're
32:33
good to go
32:35
Ford control who has access to your
32:39
secrets use fine-grained iam policies
32:43
use tag based access control use
32:46
resource based policies you have a wide
32:49
variety of tools now make the most of
32:52
them to ensure that only the appropriate
32:54
people have access to secrets next as
32:59
your organization grows and as you add
33:02
more secrets and as you add more
33:03
employees use tags and hierarchical
33:07
names to scale your secrets management
33:10
approach sixth monitor and audit the use
33:15
of your secrets and make sure that
33:17
you're duplicating secrets that are not
33:19
being used anymore and finally remember
33:22
there is no charge for versioning of
33:25
Secrets so rotate them as frequently as
33:28
you need there's also no charge for
33:30
encrypting secrets
33:32
so encrypt all your secrets in fact we
33:36
do it for you by default all right folks
33:41
that's it from me thank you so much for
33:43
your time and I'm excited to see what
33:45
you will do with secrets manager thank
33:47
you