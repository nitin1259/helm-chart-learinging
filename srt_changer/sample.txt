good morning my name is Apurv Asti I am a product manager in Amazon Web Services today I'll introduce you to one of our newest services AWS secrets manager will talk about features of the service typical use cases and how you can use this service to easily and securely manage your secrets such as database credentials SSH keys or auth tokens I'll also include demos so that you can see what the service looks like in real life alright so secrets manager well of course it enables you to manage your secrets it also makes it really easy for you to follow security best practices such as encrypting secrets and rotating these regularly so if you are an ID admin who's responsible for storing and managing secrets well you can use secrets manager to perform all of these tasks from one location if you are a security admin who's responsible for ensuring that your organization follows regulatory and compliance requirements well you can use secrets manager to audit and monitor the use of your secrets to ensure compliance and you can also use secrets manager to ensure that your secrets are rotated as frequently as required and finally if you are a developer you can on board the secrets manager so that you don't have to worry about managing secrets you can let AWS do that for you now before I start talking about the features of the service let me give you some background on why we decided to build secrets manager now as with any other AWS product or service our story begins with customer feedback we heard from customers that managing secrets is really important but it's also hard we heard use cases such as my applications use secrets but I don't want to write plain text secrets in the source code or in environment variables or we heard my organization is moving to a service Orient architecture so how do I ensure that these services can reliably and consistently get the secrets that they need to operate he also heard that customers wanted to rotate their secrets regularly to meet compliance needs or just to improve security so for example PCI requires that secrets must be rotated every thirty days and finally we also heard from customers that they wanted to control who is doing what with their secrets they needed good mechanisms to do all of this and as we dug into each of these use cases what we found was managing secrets is really hard there are solutions out there but they're either too complex or too expensive particularly when you factor in the cost of the infrastructure as well as the people required to ensure that your secrets management solution is highly available and can scale to make any spiky load when it came to rotation we found that people often build manual or programmatic processes that require them to take applications offline update secrets and then redeploy applications to work with these new secrets and with all of this process if they miss updating an application their processes would break and finally when it came to visibility our custom or we found that people had very limited visibility so for example once you share a password with someone over email you really do not have any mechanism to ensure that no one else can get that password and use that password so with all of this in mind we decided let's make life a little easier for our customers by building a service that enables them to manage the life cycle of their secrets and that's when we decided to launch AWS secrets manager a service that makes it easy for our customers to manage the lifecycle of all of their secrets in terms of features I'd like to point out four key features that enable customers should do this first secrets manager allows customers to easily rotate secrets without impacting applications or employees next secrets manager enables customers to tightly control who can do what with their secrets this service ensures that all secrets are secured and can be audited and monitored easy and finally this offers a pay-as-you-go model so no long term contracts or license fees you just pay for what you use how often you use now let's dive deeper into each of these four features I'll start with talking about the rotation capability secrets manager offers the ability to rotate secrets seamlessly without impacting applications the service offers built-in integrations for secrets for databases that are hosted on RDS later on in this in this webinar I'll show you how you can store a database secret and configure rotation with just a few clicks in the indy secrets manager console if you're looking to store and rotate other kinds of secrets you can do that easily with secrets manager simply store the secret and write a custom lambda function to make whatever rotation needs that you may have now secrets manager ensures that your applications won't break during rotation by providing this concept of versioning I'll show you how rotation works later on in the webinar the next key feature is the ability to control access to your secrets with secrets manager you do that using iam policies now for those of you who may be familiar with I am you already know that I am policies are super fine-grained so you can actually write a policy that says employee Bob can access Midas grid' only if employee bob is coming in from the corporate IT network and only if bob has authenticated using a second factor device so that's the kind of fine-grained access control you can get to define who can use your secrets when and there now along with iam policies secrets manager offers other capabilities to control access to your secrets one of the first things that comes to my mind is tag based access control so for example you can tag all the secrets for a team with the tag alpha and then just write one I am policy to grant all the members of that team access to all the secrets required by the team as a new employee joins you just grant them access by attaching the existing policy to that I am user or role similarly as the team creates more secrets use you just add you just tag these secrets with alpha and you're good to go you don't need to create new policies another mechanism to managing access to Secrets is resource based policies these are similar to s3 bucket policies or kms key policies a resource based policy lives on the resource which in this case is the secret and can be used define who can access the secret so let's say you want to grant a business partner access to a secret well you can now use a resource based policy for that without having to email the secret moving on to the the security and the audit ability capabilities secrets manager encrypts all secrets by default these secrets are encrypted using encryption keys that live in your account and are under your control secrets manager also integrates with AWS is auditing and monitoring services such as cloud trail and cloud watch so you can easily understand who is doing what with your secrets later on in this demo I'll show you how to set up an SNS notification to monitor the use of your secrets and finally we get to the pricing aspect of things as I mentioned previously there is no annual license or upfront cost you simply pay 40 cents per secret per month this price is prorated based on the number of hours per month so if you have a secret that lasts for let's say around 2 weeks you'll be billed 20 cents and not 40 cents there is also a nominal charge on the per API call all right enough talk let's switch gears and see what secrets manager looks like in real life in this demo I'll show you how to store and retrieve an ssh key from secrets manager together started i go to the AWS management console in the search bar type secrets manager this brings me to the secrets manager console as you can see i old i already have a few secrets stored in secrets manager I'll start by storing a new one now this screen asks me to select the type of secret that I'm about to store since I'm storing an SSH key I select the other type of Secrets option next I provide the actual key value I have this information already saved so I'll copy and paste it over I'm not too worried about showing you guys these values because these are dummy values that the no trick they're not real you can see the truncate right here next I choose the encryption settings I choose to continue with the default encryption setting I also have the option of using a customer master key to encrypt the secret I'll press next I now have to give the secret a name that I'll use to reference and I'll also give the secret a description a description is always a good idea because it it makes it easier to understand what this secret is for and next I press the next button I have the option of setting up a rotation but I'll skip this for now I choose next now this is the review screen this this tells me the information that I have added and it also tells me how I can retrieve this secret so for example if I if I have a Python application I can copy this code snippet and paste it in my application this code snippet will allow my application to retrieve this SSH key as and when the application needs it I press store and that's it the secret is now securely stored in secrets manager so let's see what the retrieval story looks like I'll pull up my command prompt and I'll use the get secret value command to retrieve this secret and here you go we stored a secret and we were able to retrieve it switching back to the slides now let me now walk you through the typical use cases and how you can use secrets manager to meet those use cases so one of the first use cases that we discussed was enabling applications to use secrets without providing these secrets in plain text well you can store the secret in sequence manager and then just add the dummy code to show and then just add the dummy code to enable your application to retrieve that secret for this particular example let me walk through a scenario where an application needs access to a database and requires database credentials from secrets manager to make this access happen in this scenario the database admin would load the database credential into secrets manager the dev ops engineer would deploy the application with the appropriate code to retrieve this from secrets manager and that's about it you can configure sequence manager to rotate this secret automatically neither the DBA nor the DevOps engineer need to be involved in this process from that point onwards so let me show you what's happening behind the scene and then I'll show you a demo of what this looks like in real life let's say you have an application that needs to access a database well if the application is running on an ec2 instance you can use an iam role to provide AWS credentials that can then be used to access secrets manager and any any secret that's stored within Secrets manager so here's what the experience looks like the application authenticates and authorizes access by presenting the AWS credentials once the author nan dogsy checks are passed secrets manager decrypts the secret and sends it securely over TLS to your application your app can then go use this secret and if you've configured secrets manager to rotate the secret automatically secrets manager will will execute this rotation transparently in this scenario the coolest thing is that once you've set secrets manager up no human being ever needs to touch or view the secret all the management happens automatically all the consumption happens automatically so let me show you what this looks like in real life I will set up the credit I'll store the credentials for a database in secrets manager and then I'll show you how you can easily set up rotation for those credentials I go back to the I start this process by going to the RDS console within RDS I have previously created a database for this demo nothing particularly interesting going on here it's a my sequel instance t2 micro these are the security groups to restrict access this is not publicly accessible similar to how typical databases operate this is within a V PC as you can see here so the first step is storing the credentials for this database within secrets manager I go back to the secrets manager console and start the stores secret workflow on the first screen I choose the very first option because I'm storing the credentials for a database that resides on RDS the first step is to provide a username and a password I have this information stored here already so I just copy and is this over again I am not worried about you guys seeing these credentials because I'll rotate them immediately I'll continue to use the default encryption key scrolling down secrets manager asks me to select which database these credentials are for the service needs this information to in to enable rotation later on so I select the database and choose next now I'll give the secret an easy to remember name as well as a description I choose next to come to the rotation configuration section rotation is disabled by default but I want to rotate the secret so I choose the enable automatic rotation option next I select how frequently I want secrets manager to rotate this secret 30 days seems to be fine so I'll leave it at that finally secrets manager wants to know how it should rotate the secret I ought to use the first option which says I am storing the credentials for a super user and the super user has permissions to change its own password this is similar to how you would change your own password if you were using an email client I press next and I come to the review screen this information message here shows us that the first rotation will happen immediately when you store a secret this is important because if there are errors in the rotation configuration you will be able to catch them right now scrolling down is again the sample code that you can use I press the store button as you can see from my screen secrets manager is storing the secret as well as setting up the rotation configuration so we'll give this a few seconds the way secrets manager executes rotation is to create a lambda function in the same VPC as the resource and then periodically trigger that lambda function to execute the rotation so setting of rotation can take a few seconds but as you can see now the secret is now stored and the rotation has now been configured so let's go verify this I press the view details button which brings me to the details of the secret I scroll down to see the retrieve secret value option I see that this is the password when I compare this with the previous password you can see that these two values are different so this is how secrets manager has stored the secret executed rotation and you can now verify that the rotation actually works you can also retrieve the secret from the CLI so let's go ahead and try that out I copy this command ported over koala here is the secret and all the information including the name the version ID all the information that we provided as well as the versions for the secret alright going back to our slides now the next use case that I'd like to talk about is rotating secrets well we've already seen what it looks like in practice so let me show you let me give you a peek behind the covers when you configure secrets manager to rotate a secret on your behalf secrets manager creates a lambda function in the same VPC as the resource and then uses the lambda function to trigger rotations so when it comes time to execute a rotation the lambda function triggers secrets manager to create a new secret store this new secret within the resource update the value that is stored within secrets manager now when an application attempts to retrieve the secret from secrets manager it will get the updated value throughout this entire process secrets manager uses labels to manage the various versions of a secret this enables secrets manager to know which version is active and should be passed along to applications as a result applications or developers do not have to worry about managing multiple versions of Secrets they always get the active version of a secret which they can then use to connect to the resource the next big use case is around controlling access to secrets as well as monitoring and auditing how secrets are managed well to control access you can use iam policies you can use tags you can also use resource based policies so let me show you what this looks like in real life you can you can set up an iam policy similar to what you have here to grant access to individual secrets or a range of Secrets let me show you what this looks like in practice I go back to the bilis management console and now I'll go to the iam console from the iam console I select admin user this is the user that I'm using in my CLI as you can see currently admin user has administrative permissions what that means is this user can access any resource from anywhere I will revoke this access this user now has no permissions and I can go verify this if I go to the CLI and attempt to retrieve my test secret slash my sequel we get a permissions denied so let's grant this user permissions to access secrets to do this I select add permissions I go to attach existing policies directly and then I pick a policy I have already created this policy and as you can see on your screens this policy grants the ability to get a secret and describe a secret for any secret that begins with the name my tests secret I'll review this policy and then add permissions the CLI user now has permissions should retrieve any secret that begins with Midas secret so let's go test it out yep that works what about what about any other secret yep that works too so so that's how you can use I am policies and define who can access your secrets switching back to our presentation you can write finder in iam policies to further restrict access you can add conditions you can define you can define resources to tightly control which secrets can be accessed and movin you can also control access to secrets using tags for example you can tag your secrets and then use a policy that looks similar to this policy to grant access to any secret that is tagged appropriately so this is what a resource based policy looks like you can attach this policy to grant access to I am principles within your account or I am principals in an external account so a typical use case would be granting access across AWS accounts so for example let's say you have a business partner that needs to access credentials that are stored within your account well you can write a similar policy and enable them to get that access without having to email the secret or you know give it over a post-it note along with access control comes the ability to audit and monitor well all actions in secrets manager are recorded in cloud field so you can go look at cloud trail logs to audit who is doing what with your secrets let me show you what that looks like in real life I'll switch back to the console from the IAM console I'll go to plough trail once cloud trail pulls up I select the event history option since I'm looking for secrets manager related activity I'll select the event name and set the event name as kept secret value so this shows me who has retrieved any secret from my account and I can dive deeper into each of these retrievals by looking at ad which access key was used was the was the access permitted or denied and the source IP of where the traffic came from moving back to a presentation the integration with cloud trail makes it easy for you to audit how your secrets are being used but what if you want to be a little more proactive about this well you can set up monitoring on your secrets to get alerts quickly regarding the use of your secrets so let me show you how to set up such an alert I go back to the console and this time I select cloud watch now I can set up cloud was to alert me regarding particular activity for my secrets for this demo I'll show you how to set up a cloud watch notification whenever a secret is retrieved from your service to set up a notification select rules and create a new rule this rule requires that anytime secrets manager is called from Klout rail logs for get secret value then cloud wad should trigger a lambda function then I have configured this lambda function to send me an SMS notification every time this lambda function is triggered next I press configure details and I give and I give this notification and easy to remember name and that's it I have now configured cloud watch to send me an alert every time a secret is retrieved from secrets manager all right get coming back to our slides so so up till now we've spoken about typical use cases for secrets manager the features of the service and how you can use these features to meet these use cases we went through a few demos so I hope you have a good starting point for using secrets manager as you get started here are a few things to keep in mind first no plain text secrets you have to move away from them store them in secrets manager and configure your applications to de treat these as and when they need these secrets next create unique secrets don't reuse secrets create a unique secret for every region for every account for every environment third rotate secrets regularly it's super easy with secrets manager just a few clicks and you're good to go Ford control who has access to your secrets use fine-grained iam policies use tag based access control use resource based policies you have a wide variety of tools now make the most of them to ensure that only the appropriate people have access to secrets next as your organization grows and as you add more secrets and as you add more employees use tags and hierarchical names to scale your secrets management approach sixth monitor and audit the use of your secrets and make sure that you're duplicating secrets that are not being used anymore and finally remember there is no charge for versioning of Secrets so rotate them as frequently as you need there's also no charge for encrypting secrets so encrypt all your secrets in fact we do it for you by default all right folks that's it from me thank you so much for your time and I'm excited to see what you will do with secrets manager thank 